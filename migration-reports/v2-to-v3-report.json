{
  "summary": {
    "total": 10,
    "successful": 10,
    "errors": 0,
    "timestamp": "2025-10-26T08:47:57.678Z"
  },
  "migrated": [
    {
      "id": "start",
      "v2Node": {
        "id": "start",
        "displayName": "Start Workflow",
        "type": "Start",
        "category": "meta",
        "description": "Entry point that triggers the workflow",
        "inputType": "trigger",
        "outputType": "flow",
        "defaultConnections": [
          "flow.start"
        ],
        "exampleUseCase": "Begin automated farm monitoring when sensor detects sunrise",
        "icon": "play-circle",
        "color": "#6B7280",
        "suggestedLabels": {
          "input": [],
          "output": [
            "flow.start"
          ]
        }
      },
      "v3Node": {
        "id": "start",
        "version": "1.0.0",
        "label": "Start Workflow",
        "description": "Entry point that triggers the workflow",
        "category": "trigger",
        "configSchema": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "inputs": {},
        "outputs": {},
        "ui": {
          "icon": "play-circle",
          "category": "meta",
          "fieldsOrder": [],
          "helpLinks": []
        },
        "runtime": {
          "handler": "@/executors/startExecutor",
          "timeoutMs": 30000
        },
        "meta": {
          "tags": [
            "meta"
          ],
          "createdAt": "2025-10-26T08:47:57.564Z"
        }
      }
    },
    {
      "id": "ask_question",
      "v2Node": {
        "id": "ask_question",
        "displayName": "Ask Question",
        "type": "Ask Input",
        "category": "input",
        "description": "Collect text, number, or multiple-choice input from user",
        "inputType": "user",
        "outputType": "text",
        "defaultConnections": [
          "user.response",
          "user.declined"
        ],
        "exampleUseCase": "Ask farm owner to input current flock age via WhatsApp",
        "icon": "message-circle",
        "color": "#3B82F6",
        "suggestedLabels": {
          "input": [
            "user.ready"
          ],
          "output": [
            "ai.send",
            "data.processed"
          ]
        }
      },
      "v3Node": {
        "id": "ask_question",
        "version": "1.0.0",
        "label": "Ask Question",
        "description": "Collect text, number, or multiple-choice input from user",
        "category": "trigger",
        "configSchema": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "inputs": {},
        "outputs": {},
        "ui": {
          "icon": "message-circle",
          "category": "input",
          "fieldsOrder": [],
          "helpLinks": []
        },
        "runtime": {
          "handler": "@/executors/ask_questionExecutor",
          "timeoutMs": 30000
        },
        "meta": {
          "tags": [
            "input"
          ],
          "createdAt": "2025-10-26T08:47:57.577Z"
        }
      }
    },
    {
      "id": "sensor_data",
      "v2Node": {
        "id": "sensor_data",
        "displayName": "Sensor Data",
        "type": "Sensor",
        "category": "input",
        "description": "Receive data from IoT sensors (temperature, humidity, pH, etc.)",
        "inputType": "sensor",
        "outputType": "numeric",
        "defaultConnections": [
          "data.received",
          "sensor.error"
        ],
        "exampleUseCase": "Collect temperature readings from chicken coop sensors",
        "icon": "thermometer",
        "color": "#3B82F6",
        "suggestedLabels": {
          "input": [
            "sensor.trigger"
          ],
          "output": [
            "data.received",
            "sensor.error"
          ]
        }
      },
      "v3Node": {
        "id": "sensor_data",
        "version": "1.0.0",
        "label": "Sensor Data",
        "description": "Receive data from IoT sensors (temperature, humidity, pH, etc.)",
        "category": "trigger",
        "configSchema": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "inputs": {},
        "outputs": {},
        "ui": {
          "icon": "thermometer",
          "category": "input",
          "fieldsOrder": [],
          "helpLinks": []
        },
        "runtime": {
          "handler": "@/executors/sensor_dataExecutor",
          "timeoutMs": 30000
        },
        "meta": {
          "tags": [
            "input"
          ],
          "createdAt": "2025-10-26T08:47:57.579Z"
        }
      }
    },
    {
      "id": "ai_analysis",
      "v2Node": {
        "id": "ai_analysis",
        "displayName": "AI Analysis",
        "type": "Process Data",
        "category": "processing",
        "description": "Analyze data using AI to extract insights and patterns",
        "inputType": "data",
        "outputType": "insights",
        "defaultConnections": [
          "analysis.complete",
          "analysis.failed"
        ],
        "exampleUseCase": "Analyze feed consumption patterns to predict optimal feeding times",
        "icon": "brain",
        "color": "#8B5CF6",
        "suggestedLabels": {
          "input": [
            "ai.send",
            "data.processed"
          ],
          "output": [
            "ai.result",
            "data.transformed"
          ]
        }
      },
      "v3Node": {
        "id": "ai_analysis",
        "version": "1.0.0",
        "label": "AI Analysis",
        "description": "Analyze data using AI to extract insights and patterns",
        "category": "logic",
        "configSchema": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "inputs": {},
        "outputs": {},
        "ui": {
          "icon": "brain",
          "category": "processing",
          "fieldsOrder": [],
          "helpLinks": []
        },
        "runtime": {
          "handler": "@/executors/ai_analysisExecutor",
          "timeoutMs": 30000
        },
        "meta": {
          "tags": [
            "processing"
          ],
          "createdAt": "2025-10-26T08:47:57.602Z"
        }
      }
    },
    {
      "id": "calculate",
      "v2Node": {
        "id": "calculate",
        "displayName": "Calculate",
        "type": "Calculate",
        "category": "processing",
        "description": "Perform mathematical calculations (sum, average, ratio, etc.)",
        "inputType": "numeric",
        "outputType": "numeric",
        "defaultConnections": [
          "calculation.complete",
          "calculation.error"
        ],
        "exampleUseCase": "Calculate Feed Conversion Ratio (FCR) from feed and weight data",
        "icon": "calculator",
        "color": "#8B5CF6",
        "suggestedLabels": {
          "input": [
            "data.processed"
          ],
          "output": [
            "calculation.complete",
            "calculation.error"
          ]
        }
      },
      "v3Node": {
        "id": "calculate",
        "version": "1.0.0",
        "label": "Calculate",
        "description": "Perform mathematical calculations (sum, average, ratio, etc.)",
        "category": "logic",
        "configSchema": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "inputs": {},
        "outputs": {},
        "ui": {
          "icon": "calculator",
          "category": "processing",
          "fieldsOrder": [],
          "helpLinks": []
        },
        "runtime": {
          "handler": "@/executors/calculateExecutor",
          "timeoutMs": 30000
        },
        "meta": {
          "tags": [
            "processing"
          ],
          "createdAt": "2025-10-26T08:47:57.641Z"
        }
      }
    },
    {
      "id": "decision",
      "v2Node": {
        "id": "decision",
        "displayName": "Decision",
        "type": "Decision",
        "category": "logic",
        "description": "Route workflow based on conditions (if-then-else logic)",
        "inputType": "condition",
        "outputType": "route",
        "defaultConnections": [
          "decision.yes",
          "decision.no"
        ],
        "exampleUseCase": "Route to alert if temperature exceeds safe threshold",
        "icon": "git-branch",
        "color": "#EAB308",
        "suggestedLabels": {
          "input": [
            "ai.result",
            "data.validated"
          ],
          "output": [
            "logic.yes",
            "logic.no",
            "logic.highPriority",
            "logic.standard"
          ]
        }
      },
      "v3Node": {
        "id": "decision",
        "version": "1.0.0",
        "label": "Decision",
        "description": "Route workflow based on conditions (if-then-else logic)",
        "category": "control",
        "configSchema": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "inputs": {},
        "outputs": {},
        "ui": {
          "icon": "git-branch",
          "category": "logic",
          "fieldsOrder": [],
          "helpLinks": []
        },
        "runtime": {
          "handler": "@/executors/decisionExecutor",
          "timeoutMs": 30000
        },
        "meta": {
          "tags": [
            "logic"
          ],
          "createdAt": "2025-10-26T08:47:57.644Z"
        }
      }
    },
    {
      "id": "send_message",
      "v2Node": {
        "id": "send_message",
        "displayName": "Send Message",
        "type": "Send Message",
        "category": "output",
        "description": "Send WhatsApp message with dynamic content",
        "inputType": "message",
        "outputType": "confirmation",
        "defaultConnections": [
          "message.sent",
          "message.failed"
        ],
        "exampleUseCase": "Notify farmer of critical temperature alert via WhatsApp",
        "icon": "send",
        "color": "#10B981",
        "suggestedLabels": {
          "input": [
            "notify.user",
            "alert.triggered",
            "logic.yes"
          ],
          "output": [
            "flow.complete"
          ]
        }
      },
      "v3Node": {
        "id": "send_message",
        "version": "1.0.0",
        "label": "Send Message",
        "description": "Send WhatsApp message with dynamic content",
        "category": "output",
        "configSchema": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "inputs": {},
        "outputs": {},
        "ui": {
          "icon": "send",
          "category": "output",
          "fieldsOrder": [],
          "helpLinks": []
        },
        "runtime": {
          "handler": "@/executors/send_messageExecutor",
          "timeoutMs": 30000
        },
        "meta": {
          "tags": [
            "output"
          ],
          "createdAt": "2025-10-26T08:47:57.651Z"
        }
      }
    },
    {
      "id": "store_records",
      "v2Node": {
        "id": "store_records",
        "displayName": "Store Records",
        "type": "Save Data",
        "category": "output",
        "description": "Save data to database or file system",
        "inputType": "data",
        "outputType": "confirmation",
        "defaultConnections": [
          "records.saved",
          "records.failed"
        ],
        "exampleUseCase": "Save daily feed consumption data to farm database",
        "icon": "database",
        "color": "#10B981",
        "suggestedLabels": {
          "input": [
            "db.save",
            "data.processed"
          ],
          "output": [
            "flow.complete"
          ]
        }
      },
      "v3Node": {
        "id": "store_records",
        "version": "1.0.0",
        "label": "Store Records",
        "description": "Save data to database or file system",
        "category": "output",
        "configSchema": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "inputs": {},
        "outputs": {},
        "ui": {
          "icon": "database",
          "category": "output",
          "fieldsOrder": [],
          "helpLinks": []
        },
        "runtime": {
          "handler": "@/executors/store_recordsExecutor",
          "timeoutMs": 30000
        },
        "meta": {
          "tags": [
            "output"
          ],
          "createdAt": "2025-10-26T08:47:57.659Z"
        }
      }
    },
    {
      "id": "fetch_external_data",
      "v2Node": {
        "id": "fetch_external_data",
        "displayName": "Fetch External Data",
        "type": "API Call",
        "category": "input",
        "description": "Retrieve data from external APIs or web services",
        "inputType": "request",
        "outputType": "data",
        "defaultConnections": [
          "data.fetched",
          "fetch.failed"
        ],
        "exampleUseCase": "Get weather forecast from weather API for farm planning",
        "icon": "globe",
        "color": "#3B82F6",
        "suggestedLabels": {
          "input": [
            "api.send"
          ],
          "output": [
            "api.receive",
            "data.processed"
          ]
        }
      },
      "v3Node": {
        "id": "fetch_external_data",
        "version": "1.0.0",
        "label": "Fetch External Data",
        "description": "Retrieve data from external APIs or web services",
        "category": "trigger",
        "configSchema": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "inputs": {},
        "outputs": {},
        "ui": {
          "icon": "globe",
          "category": "input",
          "fieldsOrder": [],
          "helpLinks": []
        },
        "runtime": {
          "handler": "@/executors/fetch_external_dataExecutor",
          "timeoutMs": 30000
        },
        "meta": {
          "tags": [
            "input"
          ],
          "createdAt": "2025-10-26T08:47:57.662Z"
        }
      }
    },
    {
      "id": "end",
      "v2Node": {
        "id": "end",
        "displayName": "End Workflow",
        "type": "End",
        "category": "meta",
        "description": "Terminate workflow execution",
        "inputType": "flow",
        "outputType": "none",
        "defaultConnections": [],
        "exampleUseCase": "Complete daily farm monitoring workflow",
        "icon": "stop-circle",
        "color": "#6B7280",
        "suggestedLabels": {
          "input": [
            "flow.complete",
            "flow.end"
          ],
          "output": []
        }
      },
      "v3Node": {
        "id": "end",
        "version": "1.0.0",
        "label": "End Workflow",
        "description": "Terminate workflow execution",
        "category": "trigger",
        "configSchema": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "inputs": {},
        "outputs": {},
        "ui": {
          "icon": "stop-circle",
          "category": "meta",
          "fieldsOrder": [],
          "helpLinks": []
        },
        "runtime": {
          "handler": "@/executors/endExecutor",
          "timeoutMs": 30000
        },
        "meta": {
          "tags": [
            "meta"
          ],
          "createdAt": "2025-10-26T08:47:57.674Z"
        }
      }
    }
  ],
  "errors": []
}